<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" 
	xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" 
	xmlns:wd-hr="http://www.mulesoft.org/schema/mule/wd-hr" 
	xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp" 
	xmlns:json="http://www.mulesoft.org/schema/mule/json" 
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" 
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch" 
	xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" 
	xmlns="http://www.mulesoft.org/schema/mule/core" 
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" 
	xmlns:spring="http://www.springframework.org/schema/beans" 
	version="EE-3.6.2" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/wd-hr http://www.mulesoft.org/schema/mule/wd-hr/current/mule-wd-hr.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd">
    <data-mapper:config name="WorkerType_To_Map" transformationGraphPath="workertype_to_map.grf" doc:name="WorkerType_To_Map"/>

    <batch:job name="migrateUsersBatch" max-failed-records="-1">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:input>
            <wd-hr:get-workers config-ref="Workday_Human_Resource" doc:name="Get Workers from Workday" workersRequest-ref="#[org.mule.templates.WorkersRequest.create(${migration.startDate})]"/>
            <set-payload value="#[payload.responseData.worker]" doc:name="Extract a list of Workers"/>
            <custom-filter doc:name="Filter duplicate workers" class="org.mule.templates.WorkersDeduplicationFilter"/>
        </batch:input> 
        <batch:process-records>
            <batch:step name="Get_Last_Modified_Date">
                <enricher source="payload" target="#[recordVars['lastModifiedDate']]" doc:name="store the value in 'recordVars['lastModifiedDate']'">
                    <custom-transformer class="org.mule.templates.TransactionLogProcessor" doc:name="Iterate through transaction logs"/>
                </enricher>
            </batch:step>
            <batch:step name="Map_Workday_Worker_to_SFDC_Map">
                <data-mapper:transform config-ref="WorkerType_To_Map" doc:name="WorkerType To Map"/>
                <expression-component doc:name="Set Last Modified Date"><![CDATA[payload.LastModifiedDate = recordVars['lastModifiedDate']]]></expression-component>
            </batch:step>
            <batch:step name="getUserInSalesforceStep">
                <enricher source="#[payload]" target="#[recordVars['userInSalesforce']]" doc:name="store result in record var 'userInSalesforce'">
                    <sfdc:query-single config-ref="Salesforce" query="SELECT Id, LastModifiedDate FROM User WHERE Email = '#[payload['Email']]'" doc:name="query user in Salesforce instance"/>
                </enricher>
 
            </batch:step>
            <batch:step name="selectNewerUserStep" filter-expression="#[recordVars['userInSalesforce'] is NullPayload]">

                <choice doc:name="Choice">
                    <when expression="#[org.mule.templates.UserDateComparator.isAfter(payload, recordVars['userInSalesforce'])]">
                        <expression-component doc:name="define Id in SalesForce instance"><![CDATA[// Put ID from the object in B so that SalesForce updates this object
 payload.put('Id', recordVars['userInSalesforce']['Id']);]]></expression-component> 
                    </when>
                    <otherwise>
                        <set-payload doc:name="set to null to skip this user" value="#[return null]"/>
                    </otherwise>
                </choice>
            </batch:step>
            <batch:step name="createUsersInSalesforceStep" filter-expression="#[payload is NullPayload]">
                <expression-component doc:name="setup Worker for upsert"><![CDATA[payload.put('Id', recordVars['userInSalesforce'] is NullPayload ? null : recordVars['userInSalesforce']['Id']);

 // We map the profile IDs from SalesForce instance A to B, each profileId from the left (source instance) will be map to the one on the right (target instance) 
 // TODO - You should change these IDs to the ones corresponding to your SalesForce instances profile IDs 
 payload.put('ProfileId', '${sfdc.profileId}'); 

 // TODO - Each Username should be UNIQUE even between different sandboxes of a single instance 
 // If you are trying this kick with one instance and multiple sandboxes, please make sure that the target username is not the same as the original as a duplicated username error will come up 
 payload.put('Username',  payload['Username'] + '.target'); 

 // We remove these fields as they are internally managed by SalesForce and it is not valid to create/update an object with them 
 payload.remove('type'); 
 payload.remove('LastModifiedDate');

 payload.put('LocaleSidKey', payload['LocaleSidKey'] == null ? '${sfdc.localeSidKey}' : payload['LocaleSidKey']);
 payload.put('LanguageLocaleKey', payload['LanguageLocaleKey'] == null ? '${sfdc.languageLocaleKey}' : payload['LanguageLocaleKey']);
 payload.put('TimeZoneSidKey', payload['TimeZoneSidKey'] == null ? '${sfdc.timeZoneSidKey}' : payload['TimeZoneSidKey']);
 payload.put('EmailEncodingKey', payload['EmailEncodingKey'] == null ? '${sfdc.emailEncodingKey}' : payload['EmailEncodingKey']);

 payload.put('Alias', payload['Alias'] == null ? (payload['FirstName'].substring(0, 1) + payload['LastName'].substring(0, payload['LastName'].length() < 7 ? payload['LastName'].length() : 7) ) : payload['Alias'].substring(0, payload['Alias'].length() < 8 ? payload['Alias'].length() : 8));

 ]]></expression-component> 
                <logger message="User to create: #[payload]" level="INFO" doc:name="log User to create"/>
                <batch:commit size="200" doc:name="Batch Commit">
					<sfdc:upsert config-ref="Salesforce"  type="User" doc:name="upsert Users in Salesforce" externalIdFieldName="Id">
                        <sfdc:objects ref="#[payload]"/>
					</sfdc:upsert>

                </batch:commit>
            </batch:step>
        </batch:process-records>
       <batch:on-complete>
            <scatter-gather doc:name="All">
                <processor-chain>
            		<json:object-to-json-transformer doc:name="transform BatchJobInstance to JSON"/>
            		<logger message="Migration process has finished: #[payload]" level="INFO" doc:name="log 'Migration process has finished'"/>
                </processor-chain>
				<processor-chain>
                    <parse-template location="./src/main/resources/email/body.html" doc:name="Parse Template"/>
                    <smtp:outbound-endpoint host="${smtp.host}" port="${smtp.port}" user="${smtp.user}" password="${smtp.password}" connector-ref="gmailConnector" to="${mail.to}" from="${mail.from}" subject="${mail.subject}" responseTimeout="10000" doc:name="send mail"/>
				</processor-chain>
            </scatter-gather>
        </batch:on-complete>
    </batch:job>
    <flow name="mainFlow"  processingStrategy="synchronous" doc:description="This flow is the entry point to the Kick business logic.

This flow should control the direction of the application, and it should be called by the different endpoints that your Kick exposes to trigger it.

">
        <batch:execute name="migrateUsersBatch" doc:name="trigger migrateUsersBatch"/>
        <exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="catch Exception and call defaultChoiceExceptionStrategy"/>
    </flow>
    
    
</mule>
