<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" 
	xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" 
	xmlns:wd-connector="http://www.mulesoft.org/schema/mule/wd-connector" 
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" 
	xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp" 
	xmlns:json="http://www.mulesoft.org/schema/mule/json" 
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" 
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch" 
	xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" 
	xmlns="http://www.mulesoft.org/schema/mule/core" 
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" 
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/wd-connector http://www.mulesoft.org/schema/mule/wd-connector/current/mule-wd-connector.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd">

    <batch:job name="migrateUsersBatch" max-failed-records="-1">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:input>
            <dw:transform-message doc:name="Create GetWorkers Request">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 urn:com.workday/bsvc
---
{
	ns0#Get_Workers_Request: {
		ns0#Request_Criteria: {
			ns0#Exclude_Inactive_Workers: true,
			ns0#Exclude_Employees: false,
			ns0#Exclude_Contingent_Workers: false
		},
		ns0#Response_Group: {
			ns0#Include_Reference: true,
			ns0#Include_Personal_Information: true,
			ns0#Include_User_Account: true
		}
	}
}]]></dw:set-payload>
            </dw:transform-message>
            <wd-connector:invoke config-ref="Workday__Basic" type="Human_Resources||Get_Workers" doc:name="Get Workers"/>
            <dw:transform-message doc:name="Extract list of  Workers">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/java
%namespace ns0 urn:com.workday/bsvc
---
payload.ns0#Get_Workers_Response.ns0#Response_Data.*ns0#Worker
filter (
$.ns0#Worker_Data.ns0#Personal_Data.ns0#Contact_Data.ns0#Email_Address_Data.ns0#Email_Address != null 
and 
$.ns0#Worker_Data.ns0#Personal_Data.ns0#Contact_Data.ns0#Email_Address_Data.ns0#Email_Address != ''
)
distinctBy $.ns0#Worker_Data.ns0#Personal_Data.ns0#Contact_Data.ns0#Email_Address_Data.ns0#Email_Address
]]></dw:set-payload>
            </dw:transform-message>
<!--             <dw:transform-message doc:name="Extract list of unique Workers"> 
                <dw:set-payload><![CDATA[%dw 1.0
%output application/java
%namespace ns0 urn:com.workday/bsvc
- - -
payload.ns0#Get_Workers_Response.ns0#Response_Data
]]></dw:set-payload>
            </dw:transform-message>
-->
<!--             <set-payload value="#[payload.responseData.worker]" doc:name="Extract a list of Workers"/> -->
<!--             <custom-filter doc:name="Filter duplicate workers" class="org.mule.templates.WorkersDeduplicationFilter"/> -->
        </batch:input> 
        <batch:process-records>
            <batch:step name="createUsersInSalesforceStep" >
                <logger message="#[payload]" level="INFO" doc:name="Logger"/>
                <dw:transform-message doc:name="setup Worker for upsert" metadata:id="e7f6970a-c5a7-4c07-81d3-5de2ba3ca0c0">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	// Each Username should be UNIQUE even between different sandboxes of a single instance 
 	// If you are trying this kick with one instance and multiple sandboxes, please make sure that the target username is not the same as the original as a duplicated username error will come up 
	Username          : (payload.Worker_Data.User_Account_Data.User_Name) when (payload.Worker_Data.User_Account_Data != null and payload.Worker_Data.User_Account_Data.User_Name != null) otherwise payload.Worker_Data.Personal_Data.Contact_Data.Email_Address_Data[-1].Email_Address ++ ".target",
	LastName          : payload.Worker_Data.Personal_Data.Name_Data.Legal_Name_Data.Name_Detail_Data.Last_Name default "",
	FirstName         : payload.Worker_Data.Personal_Data.Name_Data.Legal_Name_Data.Name_Detail_Data.First_Name default "",
	Email             : payload.Worker_Data.Personal_Data.Contact_Data.Email_Address_Data[-1].emailAddress when (payload.Worker_Data.Personal_Data.Contact_Data.Email_Address_Data != null) otherwise null,
	//Alias             : payload.Worker_Data.Personal_Data.Name_Data.Preferred_Name_Data.Name_Detail_Data.First_Name[0..2] ++ payload.Worker_Data.Personal_Data.Name_Data.Preferred_Name_Data.Name_Detail_Data.Last_Name[0..3],

	TimeZoneSidKey    : p('sfdc.timeZoneSidKey'),
	LocaleSidKey      : payload.Worker_Data.User_Account_Data.Locale_Reference.ID[-1].value when (payload.Worker_Data.User_Account_Data != null and payload.Worker_Data.User_Account_Data.Locale_Reference != null) otherwise p('sfdc.localeSidKey'),
	EmailEncodingKey  : p('sfdc.emailEncodingKey'),
	
	// We map the profile IDs from SalesForce instance A to B, each profileId from the left (source instance) will be map to the one on the right (target instance) 
 	// You should change these IDs to the ones corresponding to your SalesForce instances profile IDs 
	ProfileId         : p('sfdc.profileId'),
	LanguageLocaleKey : payload.Worker_Data.User_Account_Data.Default_Display_Language_Reference.ID[-1] when (payload.Worker_Data.User_Account_Data != null and payload.Worker_Data.User_Account_Data.Default_Display_Language_Reference != null) otherwise p('sfdc.languageLocaleKey')
}]]></dw:set-payload>
                </dw:transform-message>
                <enricher source="#[payload == null ? null : payload.Id]" target="#[payload.Id]" doc:name="enrich payload with existing user Id">
                    <sfdc:query-single config-ref="Salesforce" query="SELECT Id FROM User WHERE Email = '#[payload.Email]'" doc:name="query user in Salesforce instance"/>
                </enricher>
 
                <logger message="User to create: #[payload]" level="INFO" doc:name="log User to create"/>
                <batch:commit size="200" doc:name="Batch Commit">
					<sfdc:upsert config-ref="Salesforce"  type="User" doc:name="upsert Users in Salesforce" externalIdFieldName="Id">
                        <sfdc:objects ref="#[payload]"/>
					</sfdc:upsert>
                </batch:commit>
            </batch:step>
        </batch:process-records>
       <batch:on-complete>
            <scatter-gather doc:name="All">
                <processor-chain>
            		<json:object-to-json-transformer doc:name="transform BatchJobInstance to JSON"/>
            		<logger message="Migration process has finished: #[payload]" level="INFO" doc:name="log 'Migration process has finished'"/>
                </processor-chain>
				<processor-chain>
                    <parse-template location="email/body.html" doc:name="Parse Template"/>
                    <smtp:outbound-endpoint host="${smtp.host}" port="${smtp.port}" user="${smtp.user}" password="${smtp.password}" connector-ref="gmailConnector" to="${mail.to}" from="${mail.from}" subject="${mail.subject}" responseTimeout="10000" doc:name="send mail"/>
				</processor-chain>
            </scatter-gather>
        </batch:on-complete>
    </batch:job>
    <flow name="mainFlow"  processingStrategy="synchronous" doc:description="This flow is the entry point to the Kick business logic.

This flow should control the direction of the application, and it should be called by the different endpoints that your Kick exposes to trigger it.

">
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 urn:com.workday/bsvc
---
{

	ns0#Change_Legal_Name_Request: {
		ns0#Business_Process_Parameters: {
			ns0#Auto_Complete: true,
			ns0#Run_Now: true
		},
		ns0#Change_Legal_Name_Data: {
			ns0#Worker_Reference: {
				ns0#ID @(ns0#type: 'Employee_ID'): '24654'
			},
			ns0#Name_Data: {
				ns0#Country_Reference: {
					ns0#ID @(ns0#type: 'ISO_3166-1_Alpha-3_Code'): 'USA'
				},
				ns0#First_Name: 'Pista',
				ns0#Last_Name: 'Lakatos'
			}
		}
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <object-to-string-transformer doc:name="Object to String"/>
        <logger message="#[payload]" level="INFO" doc:name="Logger"/>

        <batch:execute name="migrateUsersBatch" doc:name="trigger migrateUsersBatch"/>
        <exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="catch Exception and call defaultChoiceExceptionStrategy"/>
    </flow>
    
    
</mule>
